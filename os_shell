#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#define SIZE 1024
typedef enum {false, true} bool;

int main(){
	int chpid, exitcode;
	char com[SIZE];
	char *pri[10];
	int i=0;
	int status;
	int fd;	
	
	while(1){
		bzero(com, SIZE);
		bzero(pri,sizeof(pri));
		printf("[shell] ");
		fgets(com, sizeof(com),stdin);
		com[strlen(com)-1] ='\0';
		bool Onecomm=true;
		
		if(!strcmp(com,"exit")){
			exit(0);
		}
		for(i=0; i<strlen(com);i++){
			if(com[i] == ';'){
				char *ptr = strtok(com," ;");
				while(ptr != NULL){
					pri[0] = ptr;
					printf("%s\n",pri[0]);
					chpid =fork();
					if(chpid==0){
						execvp(pri[0],pri);
						printf("command not found\n");
						exit(1);
					}
					ptr = strtok(NULL," |");
				}
				Onecomm =false;
				break;
			}
			if(com[i] == '&'){
				char *ptr = strtok(com," &");
				pri[0] = ptr;
				chpid = fork();
				if(chpid == 0){
					execvp(pri[0],pri);
					printf("command not found\n");
					exit(1);
				}
				else if(chpid>0){
					waitpid(WNOHANG, &status,0);
				}
				Onecomm =false;
				break;
			}
			else if(com[i] == '<'){
				char *ptr = strtok(&com[i+1]," \t");
				if( (fd = open(ptr, O_RDONLY | O_CREAT, 0644)) < 0)
					printf("file open error");
				dup2(fd, STDIN_FILENO);
				close(fd);
				com[i] = '\0';

				char *command = strtok(com," ");
				int index=0;
				while(command != NULL){
					pri[index] = command;
					command= strtok(NULL," ");
					index++;
				}
				chpid = fork();
				if(chpid==0){
					execvp(pri[0],pri);
					printf("command not found\n");
				}
				Onecomm =false;
				exit(1);
				break;
			}
			else if(com[i] == '>'){
				char *ptr = strtok(&com[i+1]," \t");
				if( (fd = open(ptr, O_WRONLY | O_CREAT | O_TRUNC, 0644)) < 0)
					printf("file open error");
                dup2(fd, STDOUT_FILENO);
                close(fd);
                com[i] = '\0';

				char *command = strtok(com," ");				
				int index=0;
				while(command != NULL){
					pri[index] = command;
					command= strtok(NULL," ");
					index++;
				}
				chpid = fork();
				if(chpid==0){
					execvp(pri[0],pri);
					printf("command not found\n");
				}
				Onecomm =false;
				exit(1);
				break;
			}
		}
		if(Onecomm){
			char *ptr = strtok(com," ");
			pri[0] = ptr;
			chpid =fork();
			if(chpid==0){
				execvp(pri[0],pri);
				printf("command not found\n");
				exit(1);
			}
		}
		wait(&exitcode);
	}
}
