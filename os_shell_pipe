#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>

void CloseAllFds(int fd[],int count);
void function_wait(int NumOfchild);
void IsOnePipe(char str[]);
void IsTwoPipe(char str[]);
void IsThreePipe(char str[]);

int main(int argc, char **argv)
{
    int i;
	int count=0;
	char str[1024];
	printf("shell>");
    fgets(str,sizeof(str),stdin);
    str[strlen(str)-1] ='\0';
    
	for(i=0;i<strlen(str);i++){
		if(str[i]=='|') count++;
	} 
	
	if(count==1) IsOnePipe(str);
	else if(count==2) IsTwoPipe(str);
	else if (count==3) IsThreePipe(str);
}

void IsOnePipe(char str[]){
	int fd[2];
	char *first_command[] = {"ls", "-al", NULL};
	char *second_command[] = {"wc", NULL};

	pipe(fd);

	if (fork() == 0){
		dup2(fd[0], 0);
		close(fd[1]);
		execvp(*second_command, second_command);
    }
	else{
		dup2(fd[1], 1);
		close(fd[0]);
		execvp(*first_command, first_command);
    }
}
void IsTwoPipe(char str[]){

	int i;
	char *first_command[] = {"du", "-a", NULL};
	char *second_command[] = {"sort", NULL};
	char *third_command[] = {"tail", "-10", NULL};

	int fd[4];
	pipe(fd); 
	pipe(fd + 2); 
 
	if (fork() == 0){
      dup2(fd[1], 1);
      CloseAllFds(fd,4);
      execvp(*first_command, first_command);
    }
	else
    {
		if (fork() == 0){
			dup2(fd[0], 0);
			dup2(fd[3], 1);
			CloseAllFds(fd,4);
			execvp(*second_command,second_command);
		}
		else{
			if (fork() == 0){
				dup2(fd[2], 0);
				CloseAllFds(fd,4);
				execvp(*third_command, third_command);
			}
		}
    }

	CloseAllFds(fd,4);
	function_wait(3);

}
void IsThreePipe(char str[]){
	char *first_command[] = {"find", "..","-type","d", NULL};
    char *second_command[] = {"xargs", "du", "-s",NULL};
    char *third_command[] = {"sort", "-n", NULL};
    char *last_command[] = {"tail","-1",NULL};
	int i;
	
    int fd[6];
    pipe(fd); 
    pipe(fd + 2); 
    pipe(fd + 4);
  
	if (fork() == 0){
		dup2(fd[1], 1);
		CloseAllFds(fd,6);
		execvp(*first_command, first_command);
	}
	else{
		if (fork() == 0){	  
			dup2(fd[0], 0);
			dup2(fd[3], 1);
			CloseAllFds(fd,6);
			execvp(*second_command, second_command);
		}
		else{
			if (fork() == 0){
				dup2(fd[2], 0);
				dup2(fd[5], 1);
				CloseAllFds(fd,6);
				execvp(*third_command, third_command);
			}
			else{
				if (fork() == 0){
				dup2(fd[4], 0);			
				CloseAllFds(fd,6);
				execvp(*last_command, last_command);
				}
			}
		}
    }
      
	CloseAllFds(fd,6);
	function_wait(4);
}
void CloseAllFds(int fd[],int count){
	int i;
	for(i=0; i<count;i++) close(fd[i]);
}

void function_wait(int NumOfchild){
	int i;
	int status;
	for(i=0;i<NumOfchild;i++) wait(&status);
}
